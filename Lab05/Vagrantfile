$configurando_vm = <<-SCRIPT
sudo yum install epel-release -y
sudo yum install htop git vim sshpass -y
sudo curl -fsSL https://get.docker.com | bash
sudo usermod -aG docker vagrant
sudo systemctl enable docker
sudo systemctl start docker
sudo service firewalld stop
sudo systemctl disable firewalld
sudo yum install -y sshpass
sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bkp
sudo cp /lab5/sshd_config /etc/ssh/sshd_config
sudo service sshd restart
setenforce 0
sudo cat /lab5/hosts >> /etc/hosts
SCRIPT

$nginx = <<-SCRIPT
sudo yum install epel-release -y
sudo yum install htop git vim nginx keepalived sshpass -y
sudo systemctl start nginx
sudo systemctl enable nginx
sudo systemctl start keepalived
sudo systemctl enable keepalived
sudo service firewalld stop
sudo systemctl disable firewalld
sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bkp
sudo cp /lab5/sshd_config /etc/ssh/sshd_config
sudo service sshd restart
setenforce 0
sudo cat /lab5/hosts >> /etc/hosts
SCRIPT

$nginx_master = <<-SCRIPT
sudo systemctl stop keepalived
sudo cp /etc/keepalived/keepalived.conf /etc/keepalived/keepalived.conf.bkp
sudo cp /lab5/keepalived-backup.conf /etc/keepalived/keepalived.conf
sudo systemctl start keepalived
SCRIPT

$nginx_backup = <<-SCRIPT
sudo systemctl stop keepalived
sudo cp /etc/keepalived/keepalived.conf /etc/keepalived/keepalived.conf.bkp
sudo cp /lab5/keepalived-backup.conf /etc/keepalived/keepalived.conf
sudo systemctl start keepalived
SCRIPT

$nginx_layer4 = <<-SCRIPT
sudo mkdir /etc/nginx/conf2.d
sudo echo "include /etc/nginx/conf2.d/*.conf;" >> /etc/nginx/nginx.conf
sudo cp /lab5/port10080.docker-cluster.conf  /etc/nginx/conf2.d/port10080.docker-cluster.conf 
sudo service nginx restart
SCRIPT

Vagrant.configure("2") do |config|
 
#Docker01
 config.vm.define "sd_docker01", primary: true do |sd_docker01|
  # Conf básica na VM
  sd_docker01.vm.provider "virtualbox" do |v|
   v.name = "sd_docker01"
#   v.memory = 1024
   v.memory = 512
   v.cpus = 1
#   v.gui = true
  end
  sd_docker01.vm.box = "centos/7"
  sd_docker01.vm.hostname = "docker01"
  sd_docker01.vm.network "private_network", ip: "192.168.56.61"
  sd_docker01.vm.network "private_network", ip: "192.168.50.61", virtualbox__intnet: "dcnet1"
  sd_docker01.vm.network "forwarded_port", id: "ssh", guest: 22, host: 10221, auto_correct: true, protocol: "tcp"
  # Preparando a máquina para rodar instalando utilitários
  sd_docker01.vm.provision "shell", inline: $configurando_vm
  end 
  #Docker02
 config.vm.define "sd_docker02" do |sd_docker02|
  # Conf básica na VM
  sd_docker02.vm.provider "virtualbox" do |v|
   v.name = "sd_docker02"
#   v.memory = 1024
   v.memory = 512
   v.cpus = 1
#   v.gui = true
  end
  # Conf básica no S.O
  sd_docker02.vm.box = "centos/7"
  sd_docker02.vm.hostname = "docker02"
  sd_docker02.vm.network "private_network", ip: "192.168.56.62"
  sd_docker02.vm.network "private_network", ip: "192.168.50.62", virtualbox__intnet: "dcnet1"
  sd_docker02.vm.network "forwarded_port", id: "ssh", guest: 22, host: 10222, auto_correct: true, protocol: "tcp"
  # Preparando a máquina para rodar o cluster swarm e instalando utilitários
  sd_docker02.vm.provision "shell", inline: $configurando_vm
 end
 
 #Docker03
 config.vm.define "sd_docker03" do |sd_docker03|
  # Conf básica na VM
  sd_docker03.vm.provider "virtualbox" do |v|
   v.name = "sd_docker03"
#   v.memory = 1024
   v.memory = 512
   v.cpus = 1
#   v.gui = true
  end
  # Conf básica no S.O
  sd_docker03.vm.box = "centos/7"
  sd_docker03.vm.hostname = "docker03"
  sd_docker03.vm.network "private_network", ip: "192.168.56.63"
  sd_docker03.vm.network "private_network", ip: "192.168.50.63", virtualbox__intnet: "dcnet1"
  sd_docker03.vm.network "forwarded_port", id: "ssh", guest: 22, host: 10223, auto_correct: true, protocol: "tcp"
  # Preparando a máquina para rodar o cluster swarm e instalando utilitários
  sd_docker03.vm.provision "shell", inline: $configurando_vm

 end

 #Docker04
 config.vm.define "sd_docker04" do |sd_docker04|
  # Conf básica na VM
  sd_docker04.vm.provider "virtualbox" do |v|
   v.name = "sd_docker04"
#   v.memory = 1024
   v.memory = 512
   v.cpus = 1
#   v.gui = true
  end
  # Conf básica no S.O
  sd_docker04.vm.box = "centos/7"
  sd_docker04.vm.hostname = "docker04"
  sd_docker04.vm.network "private_network", ip: "192.168.56.64"
  sd_docker04.vm.network "private_network", ip: "192.168.50.64", virtualbox__intnet: "dcnet1"
  sd_docker04.vm.network "forwarded_port", id: "ssh", guest: 22, host: 10224, auto_correct: true, protocol: "tcp"
  # Preparando a máquina para rodar o cluster swarm e instalando utilitários
  sd_docker04.vm.provision "shell", inline: $configurando_vm
 end

 config.vm.define "sd_nginx01" do |sd_nginx01|
  # Conf básica na VM
  sd_nginx01.vm.provider "virtualbox" do |v|
   v.name = "sd_nginx01"
#   v.memory = 512
   v.memory = 384
   v.cpus = 1
#   v.gui = true
  end
  # Conf básica no S.O
  sd_nginx01.vm.box = "centos/7"
  sd_nginx01.vm.hostname = "nginx01"
  sd_nginx01.vm.network "private_network", ip: "192.168.56.71"
  sd_nginx01.vm.network "private_network", ip: "192.168.50.71", virtualbox__intnet: "dcnet1"
  sd_nginx01.vm.network "forwarded_port", id: "ssh", guest: 22, host: 11221, auto_correct: true, protocol: "tcp"
  # Preparando a máquina para rodar o cluster swarm e instalando utilitários
  sd_nginx01.vm.provision "shell", inline: $nginx
  sd_nginx01.vm.provision "shell", inline: $nginx_master
  sd_nginx01.vm.provision "shell", inline: $nginx_layer4

 end

 config.vm.define "sd_nginx02" do |sd_nginx02|
  # Conf básica na VM
  sd_nginx02.vm.provider "virtualbox" do |v|
   v.name = "sd_nginx02"
#   v.memory = 512
   v.memory = 384
   v.cpus = 1
#   v.gui = true
  end
  # Conf básica no S.O
  sd_nginx02.vm.box = "centos/7"
  sd_nginx02.vm.hostname = "nginx02"
  sd_nginx02.vm.network "private_network", ip: "192.168.56.72"
  sd_nginx02.vm.network "private_network", ip: "192.168.50.72", virtualbox__intnet: "dcnet1"
  sd_nginx02.vm.network "forwarded_port", id: "ssh", guest: 22, host: 11222, auto_correct: true, protocol: "tcp"
  # Preparando a máquina para rodar o cluster swarm e instalando utilitários
  sd_nginx02.vm.provision "shell", inline: $nginx
  sd_nginx02.vm.provision "shell", inline: $nginx_backup
  sd_nginx02.vm.provision "shell", inline: $nginx_layer4
 
 end
end
